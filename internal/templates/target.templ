package templates

import (
	"github.com/cameronek/Calorific/internal/database"
	"strconv"
)

css TargetFrame() {
	background-color: #4254f5;
	color: #fff;

	border: 2px solid black;
	border-radius: 8px;
	box-shadow: 0px 2px 2px black;
}

css TargetDateBox() {
	background-color: #fff;
	color: #000;

	border: 2px solid black;
	border-radius: 8px;
	box-shadow: 0px 1px 1px black;

	height: 6vw;
	width: 6vw;

	margin: 1.5vw;

	font-size: 4vw;
	display: flex;
	justify-content: center;
	align-items: center;
}

css TargetCalorieBox() {
	background-color: #34a1eb;
	color: #fff;

	border: 2px solid black;
	border-radius: 8px;
	box-shadow: 0px 1px 1px black;

	width: 30vw;

	padding-bottom: 1vh;
	margin: 1.5vw 1.5vw 0vw 0vw;

	font-size: 4vw;
	display: inline-block;
	justify-content: center;
	align-items: center;
	text-align: center;
}

css Row() {
	display: flex;
	flex-direction: row;
}

css Col() {
	display: flex;
	flex-direction: column;
	align-items: center;
}

css Center() {
	display: flex;
	justify-content: center;
	align-items: center;
}

css EditCaloriesButton() {
	background-color: #6473ed;
	color: #fff;

	border: 2px solid black;
	border-radius: 8px;
	box-shadow: 0px 2px 2px black;
	padding: 8px;
	margin: 1vw;

	font-size: 2vw;
	width: 16vw;

	cursor: pointer;
}

css TargetButton() {
	background-color: #6473ed;
	color: #fff;

	border: 2px solid black;
	border-radius: 8px;
	box-shadow: 0px 2px 2px black;
	padding: 4px;
	margin: 1.5vw;

	font-size: 1.25vw;
	width: 6vw;

	cursor: pointer;
}

css Line() {
    margin: 8px auto;
    width: 50%;
	height: 4px;
	background-color: currentColor;
	border: none;
}

css TargetCalorieTitle() {
	font-family: Georgia, sans-serif;
	font-weight: bold;
	color: #fff;
    text-shadow: 2px 2px 2px #000000;   
    background-color: #34a1eb;
}

css Goal() {
	font-size: 1.5vw;
}

templ Target(day string, cals string, target string) {
	{{targetInt, err := strconv.Atoi(target)
	  	if err != nil {
	  		panic(err)
	  }}}

	<div class={TargetFrame}>
		<div class={Row}>
			<!-- Add column for check/X -->
			<div class={Col}>
				<div class={TargetDateBox}>
					<span class={DateText}>{day}</span>
				</div>
				@MetGoalButton(ctx.Value("sum0").(int), targetInt){}
				<div class={Center}>
					@EditTargetButton(day){}
				</div>
			</div>
			<!-- Add column for check/X -->
			@TargetCalories(cals, target){}
		</div>
		<div class={Center}>
			@AddCalsButton(ctx.Value("foods").([]database.Food)){}
			@DelCalsButton(ctx.Value("dailyFoods").([]database.Food)){}
		</div>
	</div>
	@Streak(ctx.Value("streak").(int)){}
}


templ TargetCalories(cals string, target string) {
    <div class={TargetCalorieBox}>
        <span class={TargetCalorieTitle}>kCals</span>
        <br/>
        <span class={VerdanaFont}>{cals}</span>
        <br/>
        <hr class={Line} />
        <span class={VerdanaFont}>{target}</span>
        <br/>
    </div>
}

templ EditTargetButton(day string) {
	<button class={TargetButton} onclick="openEditForm()">
		Edit Target
	</button>

	<div class={Overlay} id="overlayEdit">
		<div class={FormContainer}>
			<div class={FormPopup} id="myTarget">
			    <form action="/editTarget" method="POST" onsubmit="closeEditForm()">
				    <h1 class={FormTitle}>Edit Target Calories</h1>
				    <div class={FormFields}>
				    	<label for="kCals"><b>New Target:</b></label>
				    	<input class={Input} type="text" placeholder="Update Target" name="kCals" required>
				    	<input type="hidden" name="date" value={day} >
				    </div>
				    <div class={FormBtnContainer}>
				    	<button class={FormBtn} type="submit">Edit</button>
				    	<button class={FormBtn} type="button" onclick="closeEditForm()">Close</button>
					</div>
				</form>
			</div>
		</div>

		<script>
			function openEditForm() {
			    document.getElementById("myTarget").style.display = "block";
				document.getElementById("overlayEdit").style.display = "block";
			}

			function closeEditForm() {
  			 	document.getElementById("myTarget").style.display = "none";
				document.getElementById("overlayEdit").style.display = "none";
			}
		</script>
	</div>
}

templ AddCalsButton(foods []database.Food) {
	<button class={EditCaloriesButton} onclick="openAddCalsForm()">
		Add kCals
	</button>

	<div class={Overlay} id="overlayAddCals">
		<div class={FormContainer}>
			<div class={FormPopup} id="addCalsDisplay">
				<h1 class={FormTitle}>Add Calories</h1>
			    @FoodDisplay(foods, false, "food"){}
			    <div class={FormBtnContainer_ReducedMargin}>
					<button class={FormBtn} type="button" onclick="closeAddCalsForm()">Close</button>
				</div>
			</div>
		</div>

		<script>
			function openAddCalsForm() {
			    document.getElementById("addCalsDisplay").style.display = "block";
				document.getElementById("overlayAddCals").style.display = "block";
			}

			function closeAddCalsForm() {
  			 	document.getElementById("addCalsDisplay").style.display = "none";
				document.getElementById("overlayAddCals").style.display = "none";
			}
		</script>
	</div>
}


templ DelCalsButton(foods []database.Food) {
	<button class={EditCaloriesButton} onclick="openDelCalsForm()">
		Delete kCals
	</button>

	<div class={Overlay} id="overlayDelCals">
		<div class={FormContainer}>
			<div class={FormPopup} id="delCalsDisplay">
				<h1 class={FormTitle}>Delete Calories</h1>
			    @FoodDisplay(foods, true, "cal"){}
			    <div class={FormBtnContainer_ReducedMargin}>
					<button class={FormBtn} type="button" onclick="closeDelCalsForm()">Close</button>
				</div>
			</div>
		</div>

		<script>
			function openDelCalsForm() {
			    document.getElementById("delCalsDisplay").style.display = "block";
				document.getElementById("overlayDelCals").style.display = "block";
			}

			function closeDelCalsForm() {
  			 	document.getElementById("delCalsDisplay").style.display = "none";
				document.getElementById("overlayDelCals").style.display = "none";
			}
		</script>
	</div>
}

templ MetGoalButton(sum int, target int) {
	if sum >= target {
		<span class={Goal}>&#128077</span>
	} else {
		<span class={Goal}>&#128078</span>
	}
}

templ Streak(streak int) {
	if streak == 0 {
		<span>Eat more to reach your goal!</span>
	} else if streak == 1 {
		<span>You are on a {strconv.Itoa(streak)} day streak!</span>
	}
}